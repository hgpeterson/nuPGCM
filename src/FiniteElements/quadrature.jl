struct Jacobians{A, V}
    ∂ξ∂x::A # Jacobian matrix ∂ξ/∂x for each element
    dV::V   # volume of each element
end

"""
    J = Jacobians(el, p, t)

Compute Jacobian terms for transformations from reference element to element on grid.
Given the vertices xᵢ ∈ ℜᵈ of the reference element, the transformation ξ ↦ x is 
    x = A*ξ + b
where
    A for Line = (x₂ - x₁)/2,
    A for Triangle = [x₂-x₁  x₃-x₁
                      y₂-y₁  y₃-y₁],
    A for Wedge = [x₂-x₁  x₃-x₁  0
                   y₂-y₁  y₃-y₁  0
                   0      0      z₄-z₁].
Note that this is only possible for our special wedges that have flat tops and aligned 
bottom and top triangles. We call A = ∂x/∂ξ the Jacobian. To transform from global 
coordinates to the reference element, we then need the inverse of A, J = ∂ξ/∂x:
    J in 1D = ∂ξ/∂x,
    J in 2D = [∂ξ/∂x  ∂ξ/∂y
               ∂η/∂x  ∂η/∂y],
    J in 3D = [∂ξ/∂x  ∂ξ/∂y  ∂ξ/∂z
               ∂η/∂x  ∂η/∂y  ∂η/∂z
               ∂ζ/∂x  ∂ζ/∂y  ∂ζ/∂z].
"""
function Jacobians(m::Mesh)
    n_elements = size(m.elements, 1)
    dim = size(m.elements, 2) - 1
    el_type = get_element_type(dim)

    ∂ξ∂x = zeros(n_elements, dim, dim)
    dV = zeros(n_elements)
    @showprogress "Computing element Jacobians..." for k in 1:n_elements
        # build transformation matrix ∂x/∂ξ
        ∂x∂ξ = build_jacobian(el_type, m.nodes[m.elements[k, :], :])

        # compute determinant to get volume
        dV[k] = abs(det(∂x∂ξ))

        # invert for ∂ξ/∂x
        ∂ξ∂x[k, :, :] .= inv(∂x∂ξ)
    end

    return Jacobians(∂ξ∂x, dV)
end

function Base.show(io::IO, jacs::Jacobians)
    println(io, "Jacobians:")
    println(io, "├── ∂ξ/∂x: ", summary(jacs.∂ξ∂x))
    print(io,   "└── dV:    ", summary(jacs.dV))
end

"""
    w, ξ = quad_weights_points(; deg, dim) 

Integration weights `w` and points `ξ` for quadrature rules.


- `dim` = 1: the real line segment [-1, 1],
- `dim` = 2: the reference triangle [0 0; 1 0; 0 1], or 
- `dim` = 3: the reference tetrahedron [0 0 0; 1 0 0; 0 1 0; 0 0 1].

The integration should be exact for polynomials up to degree `deg`.
"""
struct QuadratureRule{W <: AbstractVector, P <: AbstractMatrix}
    weights::W
    points::P
end

function QuadratureRule(::Line; deg)
    # https://en.wikipedia.org/wiki/Gaussian_quadrature
    # https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_legendre/quadrature_rules_legendre.html
    if deg == 1
        w = [2.0]
        p = [0.0]
    elseif 1 < deg ≤ 3
        w = [1.0
             1.0]
        p = [-1/√3
              1/√3]
    elseif 3 < deg ≤ 5
        w = [5.0/9
             8.0/9
             5.0/9]
        p = [-√(3/5)
                0.0
              √(3/5)]
    elseif 5 < deg ≤ 7
        w = [(18 - √30)/36
             (18 + √30)/36
             (18 + √30)/36
             (18 - √30)/36]
        p = [-√(3/7 + 2/7*√(6/5))
             -√(3/7 - 2/7*√(6/5))
              √(3/7 - 2/7*√(6/5))
              √(3/7 + 2/7*√(6/5))]
    elseif 7 < deg ≤ 9
        w = [(322 - 13*√70)/900,
             (322 + 13*√70)/900,
             128/225,
             (322 + 13*√70)/900,
             (322 - 13*√70)/900]
        p = [-1/3*√(5 + 2*√(10/7)),
             -1/3*√(5 - 2*√(10/7)),
              0.0,
              1/3*√(5 - 2*√(10/7)),
              1/3*√(5 + 2*√(10/7))]
    else
        throw(ArgumentError("Degree of integration unsupported."))
    end
    return QuadratureRule(w, p)
end

function QuadratureRule(::Triangle; deg)
    # https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tri/quadrature_rules_tri.html,
    if deg == 1
        w = [1.0]
        p = [0.33333333333333333333  0.33333333333333333333]
    elseif deg == 2
        w = [0.33333333333333333333
            0.33333333333333333333
            0.33333333333333333333]
        p = [0.66666666666666666667  0.16666666666666666667
             0.16666666666666666667  0.66666666666666666667
             0.16666666666666666667  0.16666666666666666667]
    elseif deg == 3
        w = [-0.56250000000000000000
              0.52083333333333333333
              0.52083333333333333333
              0.52083333333333333333]
        p = [0.33333333333333333333  0.33333333333333333333
             0.60000000000000000000  0.20000000000000000000
             0.20000000000000000000  0.60000000000000000000
             0.20000000000000000000  0.20000000000000000000]
    elseif deg == 4
        w = [0.109951743655322
             0.109951743655322
             0.109951743655322
             0.223381589678011
             0.223381589678011
             0.223381589678011]
        p = [0.816847572980459  0.091576213509771
             0.091576213509771  0.816847572980459
             0.091576213509771  0.091576213509771
             0.108103018168070  0.445948490915965
             0.445948490915965  0.108103018168070
             0.445948490915965  0.445948490915965]
    elseif deg == 5
        w = [0.22500000000000000
             0.12593918054482717
             0.12593918054482717
             0.12593918054482717
             0.13239415278850616
             0.13239415278850616
             0.13239415278850616]
        p = [0.33333333333333333  0.33333333333333333
             0.79742698535308720  0.10128650732345633
             0.10128650732345633  0.79742698535308720
             0.10128650732345633  0.10128650732345633
             0.05971587178976981  0.47014206410511505
             0.47014206410511505  0.05971587178976981
             0.47014206410511505  0.47014206410511505]
    elseif deg == 6
        w = [0.205950504760887
             0.205950504760887
             0.205950504760887
             0.063691414286223
             0.063691414286223
             0.063691414286223
             0.063691414286223
             0.063691414286223
             0.063691414286223]
        p = [0.124949503233232  0.437525248383384
             0.437525248383384  0.124949503233232
             0.437525248383384  0.437525248383384
             0.797112651860071  0.165409927389841
             0.797112651860071  0.037477420750088
             0.165409927389841  0.797112651860071
             0.165409927389841  0.037477420750088
             0.037477420750088  0.797112651860071
             0.037477420750088  0.165409927389841]
    elseif deg == 7
        w = [0.04713673637581137
             0.07077613579259895
             0.04516809856187617
             0.01084645180365496
             0.08837017702418863
             0.1326884322074010    
             0.08467944903812383
             0.02033451909634504
             0.08837017702418863
             0.1326884322074010    
             0.08467944903812383
             0.02033451909634504
             0.04713673637581137
             0.07077613579259895
             0.04516809856187617
             0.01084645180365496]
        p = [0.0571041961  0.06546699455602246
             0.2768430136  0.05021012321401679
             0.5835904324  0.02891208422223085
             0.8602401357  0.009703785123906346
             0.0571041961  0.3111645522491480    
             0.2768430136  0.2386486597440242    
             0.5835904324  0.1374191041243166   
             0.8602401357  0.04612207989200404
             0.0571041961  0.6317312516508520   
             0.2768430136  0.4845083266559759    
             0.5835904324  0.2789904634756834    
             0.8602401357  0.09363778440799593
             0.0571041961  0.8774288093439775    
             0.2768430136  0.6729468631859832    
             0.5835904324  0.3874974833777692    
             0.8602401357  0.1300560791760936]  
    else
        throw(ArgumentError("Degree of integration unsupported."))
    end
    return QuadratureRule(w/2, p) # area of reference triangle is 1/2
end

function QuadratureRule(::Tetrahedron; deg)
    # https://people.sc.fsu.edu/~jburkardt/datasets/quadrature_rules_tet/quadrature_rules_tet.html
    if deg == 1
        w = [1.0000000000000000]
        p = [0.2500000000000000  0.2500000000000000  0.2500000000000000]
    elseif deg == 2
        w = [0.2500000000000000
             0.2500000000000000
             0.2500000000000000
             0.2500000000000000]
        p = [0.5854101966249685  0.1381966011250105  0.1381966011250105
             0.1381966011250105  0.1381966011250105  0.1381966011250105
             0.1381966011250105  0.1381966011250105  0.5854101966249685
             0.1381966011250105  0.5854101966249685  0.1381966011250105]
    elseif deg == 3
        w = [-0.8000000000000000
              0.4500000000000000
              0.4500000000000000
              0.4500000000000000
              0.4500000000000000]
        p = [0.2500000000000000  0.2500000000000000  0.2500000000000000
             0.5000000000000000  0.1666666666666667  0.1666666666666667
             0.1666666666666667  0.1666666666666667  0.1666666666666667
             0.1666666666666667  0.1666666666666667  0.5000000000000000
             0.1666666666666667  0.5000000000000000  0.1666666666666667]
    elseif deg == 4
        w = [-0.0789333333333333
              0.0457333333333333
              0.0457333333333333
              0.0457333333333333
              0.0457333333333333
              0.1493333333333333
              0.1493333333333333
              0.1493333333333333
              0.1493333333333333
              0.1493333333333333
              0.1493333333333333]
        ξ = [0.2500000000000000  0.2500000000000000  0.2500000000000000
             0.7857142857142857  0.0714285714285714  0.0714285714285714
             0.0714285714285714  0.0714285714285714  0.0714285714285714
             0.0714285714285714  0.0714285714285714  0.7857142857142857
             0.0714285714285714  0.7857142857142857  0.0714285714285714
             0.1005964238332008  0.3994035761667992  0.3994035761667992
             0.3994035761667992  0.1005964238332008  0.3994035761667992
             0.3994035761667992  0.3994035761667992  0.1005964238332008
             0.3994035761667992  0.1005964238332008  0.1005964238332008
             0.1005964238332008  0.3994035761667992  0.1005964238332008
             0.1005964238332008  0.1005964238332008  0.3994035761667992]
    elseif deg == 5
        w = [0.1817020685825351
             0.0361607142857143
             0.0361607142857143
             0.0361607142857143
             0.0361607142857143
             0.0698714945161738
             0.0698714945161738
             0.0698714945161738
             0.0698714945161738
             0.0656948493683187
             0.0656948493683187
             0.0656948493683187
             0.0656948493683187
             0.0656948493683187
             0.0656948493683187]
        p = [0.2500000000000000  0.2500000000000000  0.2500000000000000
             0.0000000000000000  0.3333333333333333  0.3333333333333333
             0.3333333333333333  0.3333333333333333  0.3333333333333333
             0.3333333333333333  0.3333333333333333  0.0000000000000000
             0.3333333333333333  0.0000000000000000  0.3333333333333333
             0.7272727272727273  0.0909090909090909  0.0909090909090909
             0.0909090909090909  0.0909090909090909  0.0909090909090909
             0.0909090909090909  0.0909090909090909  0.7272727272727273
             0.0909090909090909  0.7272727272727273  0.0909090909090909
             0.4334498464263357  0.0665501535736643  0.0665501535736643
             0.0665501535736643  0.4334498464263357  0.0665501535736643
             0.0665501535736643  0.0665501535736643  0.4334498464263357
             0.0665501535736643  0.4334498464263357  0.4334498464263357
             0.4334498464263357  0.0665501535736643  0.4334498464263357
             0.4334498464263357  0.4334498464263357  0.0665501535736643] 
    elseif deg == 6
        w = [0.0399227502581679
             0.0399227502581679
             0.0399227502581679
             0.0399227502581679
             0.0100772110553207
             0.0100772110553207
             0.0100772110553207
             0.0100772110553207
             0.0553571815436544
             0.0553571815436544
             0.0553571815436544
             0.0553571815436544
             0.0482142857142857
             0.0482142857142857
             0.0482142857142857
             0.0482142857142857
             0.0482142857142857
             0.0482142857142857
             0.0482142857142857
             0.0482142857142857
             0.0482142857142857
             0.0482142857142857
             0.0482142857142857
             0.0482142857142857]
        p = [0.3561913862225449  0.2146028712591517  0.2146028712591517
             0.2146028712591517  0.2146028712591517  0.2146028712591517
             0.2146028712591517  0.2146028712591517  0.3561913862225449
             0.2146028712591517  0.3561913862225449  0.2146028712591517
             0.8779781243961660  0.0406739585346113  0.0406739585346113
             0.0406739585346113  0.0406739585346113  0.0406739585346113
             0.0406739585346113  0.0406739585346113  0.8779781243961660
             0.0406739585346113  0.8779781243961660  0.0406739585346113
             0.0329863295731731  0.3223378901422757  0.3223378901422757
             0.3223378901422757  0.3223378901422757  0.3223378901422757
             0.3223378901422757  0.3223378901422757  0.0329863295731731
             0.3223378901422757  0.0329863295731731  0.3223378901422757
             0.2696723314583159  0.0636610018750175  0.0636610018750175
             0.0636610018750175  0.2696723314583159  0.0636610018750175
             0.0636610018750175  0.0636610018750175  0.2696723314583159
             0.6030056647916491  0.0636610018750175  0.0636610018750175
             0.0636610018750175  0.6030056647916491  0.0636610018750175
             0.0636610018750175  0.0636610018750175  0.6030056647916491
             0.0636610018750175  0.2696723314583159  0.6030056647916491
             0.2696723314583159  0.6030056647916491  0.0636610018750175
             0.6030056647916491  0.0636610018750175  0.2696723314583159
             0.0636610018750175  0.6030056647916491  0.2696723314583159
             0.2696723314583159  0.0636610018750175  0.6030056647916491
             0.6030056647916491  0.2696723314583159  0.0636610018750175]
    elseif deg == 7
        w = [0.1095853407966528
             0.0635996491464850
             0.0635996491464850
             0.0635996491464850
             0.0635996491464850
            -0.3751064406859797
            -0.3751064406859797
            -0.3751064406859797
            -0.3751064406859797
             0.0293485515784412
             0.0293485515784412
             0.0293485515784412
             0.0293485515784412
             0.0058201058201058
             0.0058201058201058
             0.0058201058201058
             0.0058201058201058
             0.0058201058201058
             0.0058201058201058
             0.1653439153439105
             0.1653439153439105
             0.1653439153439105
             0.1653439153439105
             0.1653439153439105
             0.1653439153439105
             0.1653439153439105
             0.1653439153439105
             0.1653439153439105
             0.1653439153439105
             0.1653439153439105
             0.1653439153439105]
        p = [0.2500000000000000  0.2500000000000000  0.2500000000000000
             0.7653604230090441  0.0782131923303186  0.0782131923303186
             0.0782131923303186  0.0782131923303186  0.0782131923303186
             0.0782131923303186  0.0782131923303186  0.7653604230090441
             0.0782131923303186  0.7653604230090441  0.0782131923303186
             0.6344703500082868  0.1218432166639044  0.1218432166639044
             0.1218432166639044  0.1218432166639044  0.1218432166639044
             0.1218432166639044  0.1218432166639044  0.6344703500082868
             0.1218432166639044  0.6344703500082868  0.1218432166639044
             0.0023825066607383  0.3325391644464206  0.3325391644464206
             0.3325391644464206  0.3325391644464206  0.3325391644464206
             0.3325391644464206  0.3325391644464206  0.0023825066607383
             0.3325391644464206  0.0023825066607383  0.3325391644464206
             0.0000000000000000  0.5000000000000000  0.5000000000000000
             0.5000000000000000  0.0000000000000000  0.5000000000000000
             0.5000000000000000  0.5000000000000000  0.0000000000000000
             0.5000000000000000  0.0000000000000000  0.0000000000000000
             0.0000000000000000  0.5000000000000000  0.0000000000000000
             0.0000000000000000  0.0000000000000000  0.5000000000000000
             0.2000000000000000  0.1000000000000000  0.1000000000000000
             0.1000000000000000  0.2000000000000000  0.1000000000000000
             0.1000000000000000  0.1000000000000000  0.2000000000000000
             0.6000000000000000  0.1000000000000000  0.1000000000000000
             0.1000000000000000  0.6000000000000000  0.1000000000000000
             0.1000000000000000  0.1000000000000000  0.6000000000000000
             0.1000000000000000  0.2000000000000000  0.6000000000000000
             0.2000000000000000  0.6000000000000000  0.1000000000000000
             0.6000000000000000  0.1000000000000000  0.2000000000000000
             0.1000000000000000  0.6000000000000000  0.2000000000000000
             0.2000000000000000  0.1000000000000000  0.6000000000000000
             0.6000000000000000  0.2000000000000000  0.1000000000000000]
    else
        throw(ArgumentError("Degree of integration unsupported."))
    end
    return QuadratureRule(w/6, p) # volume of reference tetrahedron is 1/6
end

"""
    integrate(f, rule::QuadratureRule)
    ∫(f, rule::QuadratureRule)
"""
function integrate(f, rule::QuadratureRule)
    return sum(rule.weights[i]*f(rule.points[i, :]) for i in eachindex(rule))
end
function ∫(f, rule::QuadratureRule)
    return integrate(f, rule)
end